# source: http://localhost:4466
# timestamp: Sun Oct 06 2019 14:01:55 GMT+0200 (Central European Summer Time)

enum Act {
  CLIMAT_CHANGE
  ECOSYSTEM_PRESERVATION
  RESOURCE_PRESERVATION
  ANIMAL_CONDITION
  POLITICAL_RESPONSIBILITY
  MARKET_INFLUENCE
  POPULATION_RESPECT
  CONSUMER_RESPECT
  QUESTIONABLE_INDUSTRIES
  SUPPLIER_REGULATION
  SHAREHOLDER_REMUNERATION
  TAXATION_LEVEL
  EXECUTIVE_COMPENSATION
  EMPLOYEE_EQUITY
  EMPLOYMENT_CONDITIONS
  EMPLOYEE_DISCRIMINATIONS
  WORKING_CONDITIONS
  MANAGING_CONDITIONS
}

type ActGrade implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  gradedTo: Company!
  gradedBy: User!
  act: Act!
  grade: Float!
  affiliatedTo: Opinion!
}

"""A connection to a list of items."""
type ActGradeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ActGradeEdge]!
  aggregate: AggregateActGrade!
}

input ActGradeCreateInput {
  id: ID
  act: Act!
  grade: Float!
  gradedTo: CompanyCreateOneWithoutActGradesInput!
  gradedBy: UserCreateOneWithoutActGradesInput!
  affiliatedTo: OpinionCreateOneWithoutAffiliationsInput!
}

input ActGradeCreateManyWithoutAffiliatedToInput {
  create: [ActGradeCreateWithoutAffiliatedToInput!]
  connect: [ActGradeWhereUniqueInput!]
}

input ActGradeCreateManyWithoutGradedByInput {
  create: [ActGradeCreateWithoutGradedByInput!]
  connect: [ActGradeWhereUniqueInput!]
}

input ActGradeCreateManyWithoutGradedToInput {
  create: [ActGradeCreateWithoutGradedToInput!]
  connect: [ActGradeWhereUniqueInput!]
}

input ActGradeCreateWithoutAffiliatedToInput {
  id: ID
  act: Act!
  grade: Float!
  gradedTo: CompanyCreateOneWithoutActGradesInput!
  gradedBy: UserCreateOneWithoutActGradesInput!
}

input ActGradeCreateWithoutGradedByInput {
  id: ID
  act: Act!
  grade: Float!
  gradedTo: CompanyCreateOneWithoutActGradesInput!
  affiliatedTo: OpinionCreateOneWithoutAffiliationsInput!
}

input ActGradeCreateWithoutGradedToInput {
  id: ID
  act: Act!
  grade: Float!
  gradedBy: UserCreateOneWithoutActGradesInput!
  affiliatedTo: OpinionCreateOneWithoutAffiliationsInput!
}

"""An edge in a connection."""
type ActGradeEdge {
  """The item at the end of the edge."""
  node: ActGrade!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ActGradeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  act_ASC
  act_DESC
  grade_ASC
  grade_DESC
}

type ActGradePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  act: Act!
  grade: Float!
}

input ActGradeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ActGradeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActGradeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActGradeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  act: Act

  """All values that are not equal to given value."""
  act_not: Act

  """All values that are contained in given list."""
  act_in: [Act!]

  """All values that are not contained in given list."""
  act_not_in: [Act!]
  grade: Float

  """All values that are not equal to given value."""
  grade_not: Float

  """All values that are contained in given list."""
  grade_in: [Float!]

  """All values that are not contained in given list."""
  grade_not_in: [Float!]

  """All values less than the given value."""
  grade_lt: Float

  """All values less than or equal the given value."""
  grade_lte: Float

  """All values greater than the given value."""
  grade_gt: Float

  """All values greater than or equal the given value."""
  grade_gte: Float
}

type ActGradeSubscriptionPayload {
  mutation: MutationType!
  node: ActGrade
  updatedFields: [String!]
  previousValues: ActGradePreviousValues
}

input ActGradeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ActGradeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActGradeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActGradeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ActGradeWhereInput
}

input ActGradeUpdateInput {
  act: Act
  grade: Float
  gradedTo: CompanyUpdateOneRequiredWithoutActGradesInput
  gradedBy: UserUpdateOneRequiredWithoutActGradesInput
  affiliatedTo: OpinionUpdateOneRequiredWithoutAffiliationsInput
}

input ActGradeUpdateManyDataInput {
  act: Act
  grade: Float
}

input ActGradeUpdateManyMutationInput {
  act: Act
  grade: Float
}

input ActGradeUpdateManyWithoutAffiliatedToInput {
  create: [ActGradeCreateWithoutAffiliatedToInput!]
  connect: [ActGradeWhereUniqueInput!]
  set: [ActGradeWhereUniqueInput!]
  disconnect: [ActGradeWhereUniqueInput!]
  delete: [ActGradeWhereUniqueInput!]
  update: [ActGradeUpdateWithWhereUniqueWithoutAffiliatedToInput!]
  updateMany: [ActGradeUpdateManyWithWhereNestedInput!]
  deleteMany: [ActGradeScalarWhereInput!]
  upsert: [ActGradeUpsertWithWhereUniqueWithoutAffiliatedToInput!]
}

input ActGradeUpdateManyWithoutGradedByInput {
  create: [ActGradeCreateWithoutGradedByInput!]
  connect: [ActGradeWhereUniqueInput!]
  set: [ActGradeWhereUniqueInput!]
  disconnect: [ActGradeWhereUniqueInput!]
  delete: [ActGradeWhereUniqueInput!]
  update: [ActGradeUpdateWithWhereUniqueWithoutGradedByInput!]
  updateMany: [ActGradeUpdateManyWithWhereNestedInput!]
  deleteMany: [ActGradeScalarWhereInput!]
  upsert: [ActGradeUpsertWithWhereUniqueWithoutGradedByInput!]
}

input ActGradeUpdateManyWithoutGradedToInput {
  create: [ActGradeCreateWithoutGradedToInput!]
  connect: [ActGradeWhereUniqueInput!]
  set: [ActGradeWhereUniqueInput!]
  disconnect: [ActGradeWhereUniqueInput!]
  delete: [ActGradeWhereUniqueInput!]
  update: [ActGradeUpdateWithWhereUniqueWithoutGradedToInput!]
  updateMany: [ActGradeUpdateManyWithWhereNestedInput!]
  deleteMany: [ActGradeScalarWhereInput!]
  upsert: [ActGradeUpsertWithWhereUniqueWithoutGradedToInput!]
}

input ActGradeUpdateManyWithWhereNestedInput {
  where: ActGradeScalarWhereInput!
  data: ActGradeUpdateManyDataInput!
}

input ActGradeUpdateWithoutAffiliatedToDataInput {
  act: Act
  grade: Float
  gradedTo: CompanyUpdateOneRequiredWithoutActGradesInput
  gradedBy: UserUpdateOneRequiredWithoutActGradesInput
}

input ActGradeUpdateWithoutGradedByDataInput {
  act: Act
  grade: Float
  gradedTo: CompanyUpdateOneRequiredWithoutActGradesInput
  affiliatedTo: OpinionUpdateOneRequiredWithoutAffiliationsInput
}

input ActGradeUpdateWithoutGradedToDataInput {
  act: Act
  grade: Float
  gradedBy: UserUpdateOneRequiredWithoutActGradesInput
  affiliatedTo: OpinionUpdateOneRequiredWithoutAffiliationsInput
}

input ActGradeUpdateWithWhereUniqueWithoutAffiliatedToInput {
  where: ActGradeWhereUniqueInput!
  data: ActGradeUpdateWithoutAffiliatedToDataInput!
}

input ActGradeUpdateWithWhereUniqueWithoutGradedByInput {
  where: ActGradeWhereUniqueInput!
  data: ActGradeUpdateWithoutGradedByDataInput!
}

input ActGradeUpdateWithWhereUniqueWithoutGradedToInput {
  where: ActGradeWhereUniqueInput!
  data: ActGradeUpdateWithoutGradedToDataInput!
}

input ActGradeUpsertWithWhereUniqueWithoutAffiliatedToInput {
  where: ActGradeWhereUniqueInput!
  update: ActGradeUpdateWithoutAffiliatedToDataInput!
  create: ActGradeCreateWithoutAffiliatedToInput!
}

input ActGradeUpsertWithWhereUniqueWithoutGradedByInput {
  where: ActGradeWhereUniqueInput!
  update: ActGradeUpdateWithoutGradedByDataInput!
  create: ActGradeCreateWithoutGradedByInput!
}

input ActGradeUpsertWithWhereUniqueWithoutGradedToInput {
  where: ActGradeWhereUniqueInput!
  update: ActGradeUpdateWithoutGradedToDataInput!
  create: ActGradeCreateWithoutGradedToInput!
}

input ActGradeWhereInput {
  """Logical AND on all given filters."""
  AND: [ActGradeWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActGradeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActGradeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  act: Act

  """All values that are not equal to given value."""
  act_not: Act

  """All values that are contained in given list."""
  act_in: [Act!]

  """All values that are not contained in given list."""
  act_not_in: [Act!]
  grade: Float

  """All values that are not equal to given value."""
  grade_not: Float

  """All values that are contained in given list."""
  grade_in: [Float!]

  """All values that are not contained in given list."""
  grade_not_in: [Float!]

  """All values less than the given value."""
  grade_lt: Float

  """All values less than or equal the given value."""
  grade_lte: Float

  """All values greater than the given value."""
  grade_gt: Float

  """All values greater than or equal the given value."""
  grade_gte: Float
  gradedTo: CompanyWhereInput
  gradedBy: UserWhereInput
  affiliatedTo: OpinionWhereInput
}

input ActGradeWhereUniqueInput {
  id: ID
}

type AggregateActGrade {
  count: Int!
}

type AggregateCauseGrade {
  count: Int!
}

type AggregateCompany {
  count: Int!
}

type AggregateCompanyCategory {
  count: Int!
}

type AggregateOpinion {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

enum Cause {
  ENVIRONMENT
  ETHICS
  FISCAL
  SOCIAL
}

type CauseGrade implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  gradedTo: Company!
  gradedBy: User!
  cause: Cause!
  grade: Float!
}

"""A connection to a list of items."""
type CauseGradeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CauseGradeEdge]!
  aggregate: AggregateCauseGrade!
}

input CauseGradeCreateInput {
  id: ID
  cause: Cause!
  grade: Float!
  gradedTo: CompanyCreateOneWithoutCauseGradesInput!
  gradedBy: UserCreateOneWithoutCauseGradesInput!
}

input CauseGradeCreateManyWithoutGradedByInput {
  create: [CauseGradeCreateWithoutGradedByInput!]
  connect: [CauseGradeWhereUniqueInput!]
}

input CauseGradeCreateManyWithoutGradedToInput {
  create: [CauseGradeCreateWithoutGradedToInput!]
  connect: [CauseGradeWhereUniqueInput!]
}

input CauseGradeCreateWithoutGradedByInput {
  id: ID
  cause: Cause!
  grade: Float!
  gradedTo: CompanyCreateOneWithoutCauseGradesInput!
}

input CauseGradeCreateWithoutGradedToInput {
  id: ID
  cause: Cause!
  grade: Float!
  gradedBy: UserCreateOneWithoutCauseGradesInput!
}

"""An edge in a connection."""
type CauseGradeEdge {
  """The item at the end of the edge."""
  node: CauseGrade!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CauseGradeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  cause_ASC
  cause_DESC
  grade_ASC
  grade_DESC
}

type CauseGradePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  cause: Cause!
  grade: Float!
}

input CauseGradeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CauseGradeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CauseGradeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CauseGradeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  cause: Cause

  """All values that are not equal to given value."""
  cause_not: Cause

  """All values that are contained in given list."""
  cause_in: [Cause!]

  """All values that are not contained in given list."""
  cause_not_in: [Cause!]
  grade: Float

  """All values that are not equal to given value."""
  grade_not: Float

  """All values that are contained in given list."""
  grade_in: [Float!]

  """All values that are not contained in given list."""
  grade_not_in: [Float!]

  """All values less than the given value."""
  grade_lt: Float

  """All values less than or equal the given value."""
  grade_lte: Float

  """All values greater than the given value."""
  grade_gt: Float

  """All values greater than or equal the given value."""
  grade_gte: Float
}

type CauseGradeSubscriptionPayload {
  mutation: MutationType!
  node: CauseGrade
  updatedFields: [String!]
  previousValues: CauseGradePreviousValues
}

input CauseGradeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CauseGradeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CauseGradeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CauseGradeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CauseGradeWhereInput
}

input CauseGradeUpdateInput {
  cause: Cause
  grade: Float
  gradedTo: CompanyUpdateOneRequiredWithoutCauseGradesInput
  gradedBy: UserUpdateOneRequiredWithoutCauseGradesInput
}

input CauseGradeUpdateManyDataInput {
  cause: Cause
  grade: Float
}

input CauseGradeUpdateManyMutationInput {
  cause: Cause
  grade: Float
}

input CauseGradeUpdateManyWithoutGradedByInput {
  create: [CauseGradeCreateWithoutGradedByInput!]
  connect: [CauseGradeWhereUniqueInput!]
  set: [CauseGradeWhereUniqueInput!]
  disconnect: [CauseGradeWhereUniqueInput!]
  delete: [CauseGradeWhereUniqueInput!]
  update: [CauseGradeUpdateWithWhereUniqueWithoutGradedByInput!]
  updateMany: [CauseGradeUpdateManyWithWhereNestedInput!]
  deleteMany: [CauseGradeScalarWhereInput!]
  upsert: [CauseGradeUpsertWithWhereUniqueWithoutGradedByInput!]
}

input CauseGradeUpdateManyWithoutGradedToInput {
  create: [CauseGradeCreateWithoutGradedToInput!]
  connect: [CauseGradeWhereUniqueInput!]
  set: [CauseGradeWhereUniqueInput!]
  disconnect: [CauseGradeWhereUniqueInput!]
  delete: [CauseGradeWhereUniqueInput!]
  update: [CauseGradeUpdateWithWhereUniqueWithoutGradedToInput!]
  updateMany: [CauseGradeUpdateManyWithWhereNestedInput!]
  deleteMany: [CauseGradeScalarWhereInput!]
  upsert: [CauseGradeUpsertWithWhereUniqueWithoutGradedToInput!]
}

input CauseGradeUpdateManyWithWhereNestedInput {
  where: CauseGradeScalarWhereInput!
  data: CauseGradeUpdateManyDataInput!
}

input CauseGradeUpdateWithoutGradedByDataInput {
  cause: Cause
  grade: Float
  gradedTo: CompanyUpdateOneRequiredWithoutCauseGradesInput
}

input CauseGradeUpdateWithoutGradedToDataInput {
  cause: Cause
  grade: Float
  gradedBy: UserUpdateOneRequiredWithoutCauseGradesInput
}

input CauseGradeUpdateWithWhereUniqueWithoutGradedByInput {
  where: CauseGradeWhereUniqueInput!
  data: CauseGradeUpdateWithoutGradedByDataInput!
}

input CauseGradeUpdateWithWhereUniqueWithoutGradedToInput {
  where: CauseGradeWhereUniqueInput!
  data: CauseGradeUpdateWithoutGradedToDataInput!
}

input CauseGradeUpsertWithWhereUniqueWithoutGradedByInput {
  where: CauseGradeWhereUniqueInput!
  update: CauseGradeUpdateWithoutGradedByDataInput!
  create: CauseGradeCreateWithoutGradedByInput!
}

input CauseGradeUpsertWithWhereUniqueWithoutGradedToInput {
  where: CauseGradeWhereUniqueInput!
  update: CauseGradeUpdateWithoutGradedToDataInput!
  create: CauseGradeCreateWithoutGradedToInput!
}

input CauseGradeWhereInput {
  """Logical AND on all given filters."""
  AND: [CauseGradeWhereInput!]

  """Logical OR on all given filters."""
  OR: [CauseGradeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CauseGradeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  cause: Cause

  """All values that are not equal to given value."""
  cause_not: Cause

  """All values that are contained in given list."""
  cause_in: [Cause!]

  """All values that are not contained in given list."""
  cause_not_in: [Cause!]
  grade: Float

  """All values that are not equal to given value."""
  grade_not: Float

  """All values that are contained in given list."""
  grade_in: [Float!]

  """All values that are not contained in given list."""
  grade_not_in: [Float!]

  """All values less than the given value."""
  grade_lt: Float

  """All values less than or equal the given value."""
  grade_lte: Float

  """All values greater than the given value."""
  grade_gt: Float

  """All values greater than or equal the given value."""
  grade_gte: Float
  gradedTo: CompanyWhereInput
  gradedBy: UserWhereInput
}

input CauseGradeWhereUniqueInput {
  id: ID
}

type Company implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  logo: String
  actGrades(where: ActGradeWhereInput, orderBy: ActGradeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ActGrade!]
  causeGrades(where: CauseGradeWhereInput, orderBy: CauseGradeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CauseGrade!]
  opinions(where: OpinionWhereInput, orderBy: OpinionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Opinion!]
  category(where: CompanyCategoryWhereInput, orderBy: CompanyCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CompanyCategory!]
  karma: Float
}

type CompanyCategory implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company!]
}

"""A connection to a list of items."""
type CompanyCategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CompanyCategoryEdge]!
  aggregate: AggregateCompanyCategory!
}

input CompanyCategoryCreateInput {
  id: ID
  name: String!
  companies: CompanyCreateManyWithoutCategoryInput
}

input CompanyCategoryCreateManyWithoutCompaniesInput {
  create: [CompanyCategoryCreateWithoutCompaniesInput!]
  connect: [CompanyCategoryWhereUniqueInput!]
}

input CompanyCategoryCreateWithoutCompaniesInput {
  id: ID
  name: String!
}

"""An edge in a connection."""
type CompanyCategoryEdge {
  """The item at the end of the edge."""
  node: CompanyCategory!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CompanyCategoryOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type CompanyCategoryPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

input CompanyCategoryScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CompanyCategoryScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CompanyCategoryScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CompanyCategoryScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type CompanyCategorySubscriptionPayload {
  mutation: MutationType!
  node: CompanyCategory
  updatedFields: [String!]
  previousValues: CompanyCategoryPreviousValues
}

input CompanyCategorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CompanyCategorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CompanyCategorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CompanyCategorySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CompanyCategoryWhereInput
}

input CompanyCategoryUpdateInput {
  name: String
  companies: CompanyUpdateManyWithoutCategoryInput
}

input CompanyCategoryUpdateManyDataInput {
  name: String
}

input CompanyCategoryUpdateManyMutationInput {
  name: String
}

input CompanyCategoryUpdateManyWithoutCompaniesInput {
  create: [CompanyCategoryCreateWithoutCompaniesInput!]
  connect: [CompanyCategoryWhereUniqueInput!]
  set: [CompanyCategoryWhereUniqueInput!]
  disconnect: [CompanyCategoryWhereUniqueInput!]
  delete: [CompanyCategoryWhereUniqueInput!]
  update: [CompanyCategoryUpdateWithWhereUniqueWithoutCompaniesInput!]
  updateMany: [CompanyCategoryUpdateManyWithWhereNestedInput!]
  deleteMany: [CompanyCategoryScalarWhereInput!]
  upsert: [CompanyCategoryUpsertWithWhereUniqueWithoutCompaniesInput!]
}

input CompanyCategoryUpdateManyWithWhereNestedInput {
  where: CompanyCategoryScalarWhereInput!
  data: CompanyCategoryUpdateManyDataInput!
}

input CompanyCategoryUpdateWithoutCompaniesDataInput {
  name: String
}

input CompanyCategoryUpdateWithWhereUniqueWithoutCompaniesInput {
  where: CompanyCategoryWhereUniqueInput!
  data: CompanyCategoryUpdateWithoutCompaniesDataInput!
}

input CompanyCategoryUpsertWithWhereUniqueWithoutCompaniesInput {
  where: CompanyCategoryWhereUniqueInput!
  update: CompanyCategoryUpdateWithoutCompaniesDataInput!
  create: CompanyCategoryCreateWithoutCompaniesInput!
}

input CompanyCategoryWhereInput {
  """Logical AND on all given filters."""
  AND: [CompanyCategoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [CompanyCategoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CompanyCategoryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  companies_every: CompanyWhereInput
  companies_some: CompanyWhereInput
  companies_none: CompanyWhereInput
}

input CompanyCategoryWhereUniqueInput {
  id: ID
  name: String
}

"""A connection to a list of items."""
type CompanyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CompanyEdge]!
  aggregate: AggregateCompany!
}

input CompanyCreateInput {
  id: ID
  name: String!
  logo: String
  karma: Float
  actGrades: ActGradeCreateManyWithoutGradedToInput
  causeGrades: CauseGradeCreateManyWithoutGradedToInput
  opinions: OpinionCreateManyWithoutRegardingWhoInput
  category: CompanyCategoryCreateManyWithoutCompaniesInput
}

input CompanyCreateManyWithoutCategoryInput {
  create: [CompanyCreateWithoutCategoryInput!]
  connect: [CompanyWhereUniqueInput!]
}

input CompanyCreateOneWithoutActGradesInput {
  create: CompanyCreateWithoutActGradesInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutCauseGradesInput {
  create: CompanyCreateWithoutCauseGradesInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutOpinionsInput {
  create: CompanyCreateWithoutOpinionsInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutActGradesInput {
  id: ID
  name: String!
  logo: String
  karma: Float
  causeGrades: CauseGradeCreateManyWithoutGradedToInput
  opinions: OpinionCreateManyWithoutRegardingWhoInput
  category: CompanyCategoryCreateManyWithoutCompaniesInput
}

input CompanyCreateWithoutCategoryInput {
  id: ID
  name: String!
  logo: String
  karma: Float
  actGrades: ActGradeCreateManyWithoutGradedToInput
  causeGrades: CauseGradeCreateManyWithoutGradedToInput
  opinions: OpinionCreateManyWithoutRegardingWhoInput
}

input CompanyCreateWithoutCauseGradesInput {
  id: ID
  name: String!
  logo: String
  karma: Float
  actGrades: ActGradeCreateManyWithoutGradedToInput
  opinions: OpinionCreateManyWithoutRegardingWhoInput
  category: CompanyCategoryCreateManyWithoutCompaniesInput
}

input CompanyCreateWithoutOpinionsInput {
  id: ID
  name: String!
  logo: String
  karma: Float
  actGrades: ActGradeCreateManyWithoutGradedToInput
  causeGrades: CauseGradeCreateManyWithoutGradedToInput
  category: CompanyCategoryCreateManyWithoutCompaniesInput
}

"""An edge in a connection."""
type CompanyEdge {
  """The item at the end of the edge."""
  node: Company!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CompanyOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  logo_ASC
  logo_DESC
  karma_ASC
  karma_DESC
}

type CompanyPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  logo: String
  karma: Float
}

input CompanyScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CompanyScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CompanyScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CompanyScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  logo: String

  """All values that are not equal to given value."""
  logo_not: String

  """All values that are contained in given list."""
  logo_in: [String!]

  """All values that are not contained in given list."""
  logo_not_in: [String!]

  """All values less than the given value."""
  logo_lt: String

  """All values less than or equal the given value."""
  logo_lte: String

  """All values greater than the given value."""
  logo_gt: String

  """All values greater than or equal the given value."""
  logo_gte: String

  """All values containing the given string."""
  logo_contains: String

  """All values not containing the given string."""
  logo_not_contains: String

  """All values starting with the given string."""
  logo_starts_with: String

  """All values not starting with the given string."""
  logo_not_starts_with: String

  """All values ending with the given string."""
  logo_ends_with: String

  """All values not ending with the given string."""
  logo_not_ends_with: String
  karma: Float

  """All values that are not equal to given value."""
  karma_not: Float

  """All values that are contained in given list."""
  karma_in: [Float!]

  """All values that are not contained in given list."""
  karma_not_in: [Float!]

  """All values less than the given value."""
  karma_lt: Float

  """All values less than or equal the given value."""
  karma_lte: Float

  """All values greater than the given value."""
  karma_gt: Float

  """All values greater than or equal the given value."""
  karma_gte: Float
}

type CompanySubscriptionPayload {
  mutation: MutationType!
  node: Company
  updatedFields: [String!]
  previousValues: CompanyPreviousValues
}

input CompanySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CompanySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CompanySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CompanySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CompanyWhereInput
}

input CompanyUpdateInput {
  name: String
  logo: String
  karma: Float
  actGrades: ActGradeUpdateManyWithoutGradedToInput
  causeGrades: CauseGradeUpdateManyWithoutGradedToInput
  opinions: OpinionUpdateManyWithoutRegardingWhoInput
  category: CompanyCategoryUpdateManyWithoutCompaniesInput
}

input CompanyUpdateManyDataInput {
  name: String
  logo: String
  karma: Float
}

input CompanyUpdateManyMutationInput {
  name: String
  logo: String
  karma: Float
}

input CompanyUpdateManyWithoutCategoryInput {
  create: [CompanyCreateWithoutCategoryInput!]
  connect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  delete: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [CompanyUpdateManyWithWhereNestedInput!]
  deleteMany: [CompanyScalarWhereInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutCategoryInput!]
}

input CompanyUpdateManyWithWhereNestedInput {
  where: CompanyScalarWhereInput!
  data: CompanyUpdateManyDataInput!
}

input CompanyUpdateOneRequiredWithoutActGradesInput {
  create: CompanyCreateWithoutActGradesInput
  connect: CompanyWhereUniqueInput
  update: CompanyUpdateWithoutActGradesDataInput
  upsert: CompanyUpsertWithoutActGradesInput
}

input CompanyUpdateOneRequiredWithoutCauseGradesInput {
  create: CompanyCreateWithoutCauseGradesInput
  connect: CompanyWhereUniqueInput
  update: CompanyUpdateWithoutCauseGradesDataInput
  upsert: CompanyUpsertWithoutCauseGradesInput
}

input CompanyUpdateOneRequiredWithoutOpinionsInput {
  create: CompanyCreateWithoutOpinionsInput
  connect: CompanyWhereUniqueInput
  update: CompanyUpdateWithoutOpinionsDataInput
  upsert: CompanyUpsertWithoutOpinionsInput
}

input CompanyUpdateWithoutActGradesDataInput {
  name: String
  logo: String
  karma: Float
  causeGrades: CauseGradeUpdateManyWithoutGradedToInput
  opinions: OpinionUpdateManyWithoutRegardingWhoInput
  category: CompanyCategoryUpdateManyWithoutCompaniesInput
}

input CompanyUpdateWithoutCategoryDataInput {
  name: String
  logo: String
  karma: Float
  actGrades: ActGradeUpdateManyWithoutGradedToInput
  causeGrades: CauseGradeUpdateManyWithoutGradedToInput
  opinions: OpinionUpdateManyWithoutRegardingWhoInput
}

input CompanyUpdateWithoutCauseGradesDataInput {
  name: String
  logo: String
  karma: Float
  actGrades: ActGradeUpdateManyWithoutGradedToInput
  opinions: OpinionUpdateManyWithoutRegardingWhoInput
  category: CompanyCategoryUpdateManyWithoutCompaniesInput
}

input CompanyUpdateWithoutOpinionsDataInput {
  name: String
  logo: String
  karma: Float
  actGrades: ActGradeUpdateManyWithoutGradedToInput
  causeGrades: CauseGradeUpdateManyWithoutGradedToInput
  category: CompanyCategoryUpdateManyWithoutCompaniesInput
}

input CompanyUpdateWithWhereUniqueWithoutCategoryInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateWithoutCategoryDataInput!
}

input CompanyUpsertWithoutActGradesInput {
  update: CompanyUpdateWithoutActGradesDataInput!
  create: CompanyCreateWithoutActGradesInput!
}

input CompanyUpsertWithoutCauseGradesInput {
  update: CompanyUpdateWithoutCauseGradesDataInput!
  create: CompanyCreateWithoutCauseGradesInput!
}

input CompanyUpsertWithoutOpinionsInput {
  update: CompanyUpdateWithoutOpinionsDataInput!
  create: CompanyCreateWithoutOpinionsInput!
}

input CompanyUpsertWithWhereUniqueWithoutCategoryInput {
  where: CompanyWhereUniqueInput!
  update: CompanyUpdateWithoutCategoryDataInput!
  create: CompanyCreateWithoutCategoryInput!
}

input CompanyWhereInput {
  """Logical AND on all given filters."""
  AND: [CompanyWhereInput!]

  """Logical OR on all given filters."""
  OR: [CompanyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CompanyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  logo: String

  """All values that are not equal to given value."""
  logo_not: String

  """All values that are contained in given list."""
  logo_in: [String!]

  """All values that are not contained in given list."""
  logo_not_in: [String!]

  """All values less than the given value."""
  logo_lt: String

  """All values less than or equal the given value."""
  logo_lte: String

  """All values greater than the given value."""
  logo_gt: String

  """All values greater than or equal the given value."""
  logo_gte: String

  """All values containing the given string."""
  logo_contains: String

  """All values not containing the given string."""
  logo_not_contains: String

  """All values starting with the given string."""
  logo_starts_with: String

  """All values not starting with the given string."""
  logo_not_starts_with: String

  """All values ending with the given string."""
  logo_ends_with: String

  """All values not ending with the given string."""
  logo_not_ends_with: String
  karma: Float

  """All values that are not equal to given value."""
  karma_not: Float

  """All values that are contained in given list."""
  karma_in: [Float!]

  """All values that are not contained in given list."""
  karma_not_in: [Float!]

  """All values less than the given value."""
  karma_lt: Float

  """All values less than or equal the given value."""
  karma_lte: Float

  """All values greater than the given value."""
  karma_gt: Float

  """All values greater than or equal the given value."""
  karma_gte: Float
  actGrades_every: ActGradeWhereInput
  actGrades_some: ActGradeWhereInput
  actGrades_none: ActGradeWhereInput
  causeGrades_every: CauseGradeWhereInput
  causeGrades_some: CauseGradeWhereInput
  causeGrades_none: CauseGradeWhereInput
  opinions_every: OpinionWhereInput
  opinions_some: OpinionWhereInput
  opinions_none: OpinionWhereInput
  category_every: CompanyCategoryWhereInput
  category_some: CompanyCategoryWhereInput
  category_none: CompanyCategoryWhereInput
}

input CompanyWhereUniqueInput {
  id: ID
  name: String
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createCompany(data: CompanyCreateInput!): Company!
  createCompanyCategory(data: CompanyCategoryCreateInput!): CompanyCategory!
  createUser(data: UserCreateInput!): User!
  createOpinion(data: OpinionCreateInput!): Opinion!
  createActGrade(data: ActGradeCreateInput!): ActGrade!
  createCauseGrade(data: CauseGradeCreateInput!): CauseGrade!
  updateCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company
  updateCompanyCategory(data: CompanyCategoryUpdateInput!, where: CompanyCategoryWhereUniqueInput!): CompanyCategory
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateOpinion(data: OpinionUpdateInput!, where: OpinionWhereUniqueInput!): Opinion
  updateActGrade(data: ActGradeUpdateInput!, where: ActGradeWhereUniqueInput!): ActGrade
  updateCauseGrade(data: CauseGradeUpdateInput!, where: CauseGradeWhereUniqueInput!): CauseGrade
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteCompanyCategory(where: CompanyCategoryWhereUniqueInput!): CompanyCategory
  deleteUser(where: UserWhereUniqueInput!): User
  deleteOpinion(where: OpinionWhereUniqueInput!): Opinion
  deleteActGrade(where: ActGradeWhereUniqueInput!): ActGrade
  deleteCauseGrade(where: CauseGradeWhereUniqueInput!): CauseGrade
  upsertCompany(where: CompanyWhereUniqueInput!, create: CompanyCreateInput!, update: CompanyUpdateInput!): Company!
  upsertCompanyCategory(where: CompanyCategoryWhereUniqueInput!, create: CompanyCategoryCreateInput!, update: CompanyCategoryUpdateInput!): CompanyCategory!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertOpinion(where: OpinionWhereUniqueInput!, create: OpinionCreateInput!, update: OpinionUpdateInput!): Opinion!
  upsertActGrade(where: ActGradeWhereUniqueInput!, create: ActGradeCreateInput!, update: ActGradeUpdateInput!): ActGrade!
  upsertCauseGrade(where: CauseGradeWhereUniqueInput!, create: CauseGradeCreateInput!, update: CauseGradeUpdateInput!): CauseGrade!
  updateManyCompanies(data: CompanyUpdateManyMutationInput!, where: CompanyWhereInput): BatchPayload!
  updateManyCompanyCategories(data: CompanyCategoryUpdateManyMutationInput!, where: CompanyCategoryWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyOpinions(data: OpinionUpdateManyMutationInput!, where: OpinionWhereInput): BatchPayload!
  updateManyActGrades(data: ActGradeUpdateManyMutationInput!, where: ActGradeWhereInput): BatchPayload!
  updateManyCauseGrades(data: CauseGradeUpdateManyMutationInput!, where: CauseGradeWhereInput): BatchPayload!
  deleteManyCompanies(where: CompanyWhereInput): BatchPayload!
  deleteManyCompanyCategories(where: CompanyCategoryWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyOpinions(where: OpinionWhereInput): BatchPayload!
  deleteManyActGrades(where: ActGradeWhereInput): BatchPayload!
  deleteManyCauseGrades(where: CauseGradeWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Opinion implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  regardingWho: Company!
  regardingWhat: Act!
  title: String!
  text: String!
  sources: [String!]!
  tags: [String!]!
  writtenBy: User!
  affiliations(where: ActGradeWhereInput, orderBy: ActGradeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ActGrade!]
}

"""A connection to a list of items."""
type OpinionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OpinionEdge]!
  aggregate: AggregateOpinion!
}

input OpinionCreateInput {
  id: ID
  regardingWhat: Act!
  title: String!
  text: String!
  sources: OpinionCreatesourcesInput
  tags: OpinionCreatetagsInput
  regardingWho: CompanyCreateOneWithoutOpinionsInput!
  writtenBy: UserCreateOneWithoutOpinionsInput!
  affiliations: ActGradeCreateManyWithoutAffiliatedToInput
}

input OpinionCreateManyWithoutRegardingWhoInput {
  create: [OpinionCreateWithoutRegardingWhoInput!]
  connect: [OpinionWhereUniqueInput!]
}

input OpinionCreateManyWithoutWrittenByInput {
  create: [OpinionCreateWithoutWrittenByInput!]
  connect: [OpinionWhereUniqueInput!]
}

input OpinionCreateOneWithoutAffiliationsInput {
  create: OpinionCreateWithoutAffiliationsInput
  connect: OpinionWhereUniqueInput
}

input OpinionCreatesourcesInput {
  set: [String!]
}

input OpinionCreatetagsInput {
  set: [String!]
}

input OpinionCreateWithoutAffiliationsInput {
  id: ID
  regardingWhat: Act!
  title: String!
  text: String!
  sources: OpinionCreatesourcesInput
  tags: OpinionCreatetagsInput
  regardingWho: CompanyCreateOneWithoutOpinionsInput!
  writtenBy: UserCreateOneWithoutOpinionsInput!
}

input OpinionCreateWithoutRegardingWhoInput {
  id: ID
  regardingWhat: Act!
  title: String!
  text: String!
  sources: OpinionCreatesourcesInput
  tags: OpinionCreatetagsInput
  writtenBy: UserCreateOneWithoutOpinionsInput!
  affiliations: ActGradeCreateManyWithoutAffiliatedToInput
}

input OpinionCreateWithoutWrittenByInput {
  id: ID
  regardingWhat: Act!
  title: String!
  text: String!
  sources: OpinionCreatesourcesInput
  tags: OpinionCreatetagsInput
  regardingWho: CompanyCreateOneWithoutOpinionsInput!
  affiliations: ActGradeCreateManyWithoutAffiliatedToInput
}

"""An edge in a connection."""
type OpinionEdge {
  """The item at the end of the edge."""
  node: Opinion!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OpinionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  regardingWhat_ASC
  regardingWhat_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
}

type OpinionPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  regardingWhat: Act!
  title: String!
  text: String!
  sources: [String!]!
  tags: [String!]!
}

input OpinionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [OpinionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [OpinionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OpinionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  regardingWhat: Act

  """All values that are not equal to given value."""
  regardingWhat_not: Act

  """All values that are contained in given list."""
  regardingWhat_in: [Act!]

  """All values that are not contained in given list."""
  regardingWhat_not_in: [Act!]
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
}

type OpinionSubscriptionPayload {
  mutation: MutationType!
  node: Opinion
  updatedFields: [String!]
  previousValues: OpinionPreviousValues
}

input OpinionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OpinionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OpinionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OpinionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OpinionWhereInput
}

input OpinionUpdateInput {
  regardingWhat: Act
  title: String
  text: String
  sources: OpinionUpdatesourcesInput
  tags: OpinionUpdatetagsInput
  regardingWho: CompanyUpdateOneRequiredWithoutOpinionsInput
  writtenBy: UserUpdateOneRequiredWithoutOpinionsInput
  affiliations: ActGradeUpdateManyWithoutAffiliatedToInput
}

input OpinionUpdateManyDataInput {
  regardingWhat: Act
  title: String
  text: String
  sources: OpinionUpdatesourcesInput
  tags: OpinionUpdatetagsInput
}

input OpinionUpdateManyMutationInput {
  regardingWhat: Act
  title: String
  text: String
  sources: OpinionUpdatesourcesInput
  tags: OpinionUpdatetagsInput
}

input OpinionUpdateManyWithoutRegardingWhoInput {
  create: [OpinionCreateWithoutRegardingWhoInput!]
  connect: [OpinionWhereUniqueInput!]
  set: [OpinionWhereUniqueInput!]
  disconnect: [OpinionWhereUniqueInput!]
  delete: [OpinionWhereUniqueInput!]
  update: [OpinionUpdateWithWhereUniqueWithoutRegardingWhoInput!]
  updateMany: [OpinionUpdateManyWithWhereNestedInput!]
  deleteMany: [OpinionScalarWhereInput!]
  upsert: [OpinionUpsertWithWhereUniqueWithoutRegardingWhoInput!]
}

input OpinionUpdateManyWithoutWrittenByInput {
  create: [OpinionCreateWithoutWrittenByInput!]
  connect: [OpinionWhereUniqueInput!]
  set: [OpinionWhereUniqueInput!]
  disconnect: [OpinionWhereUniqueInput!]
  delete: [OpinionWhereUniqueInput!]
  update: [OpinionUpdateWithWhereUniqueWithoutWrittenByInput!]
  updateMany: [OpinionUpdateManyWithWhereNestedInput!]
  deleteMany: [OpinionScalarWhereInput!]
  upsert: [OpinionUpsertWithWhereUniqueWithoutWrittenByInput!]
}

input OpinionUpdateManyWithWhereNestedInput {
  where: OpinionScalarWhereInput!
  data: OpinionUpdateManyDataInput!
}

input OpinionUpdateOneRequiredWithoutAffiliationsInput {
  create: OpinionCreateWithoutAffiliationsInput
  connect: OpinionWhereUniqueInput
  update: OpinionUpdateWithoutAffiliationsDataInput
  upsert: OpinionUpsertWithoutAffiliationsInput
}

input OpinionUpdatesourcesInput {
  set: [String!]
}

input OpinionUpdatetagsInput {
  set: [String!]
}

input OpinionUpdateWithoutAffiliationsDataInput {
  regardingWhat: Act
  title: String
  text: String
  sources: OpinionUpdatesourcesInput
  tags: OpinionUpdatetagsInput
  regardingWho: CompanyUpdateOneRequiredWithoutOpinionsInput
  writtenBy: UserUpdateOneRequiredWithoutOpinionsInput
}

input OpinionUpdateWithoutRegardingWhoDataInput {
  regardingWhat: Act
  title: String
  text: String
  sources: OpinionUpdatesourcesInput
  tags: OpinionUpdatetagsInput
  writtenBy: UserUpdateOneRequiredWithoutOpinionsInput
  affiliations: ActGradeUpdateManyWithoutAffiliatedToInput
}

input OpinionUpdateWithoutWrittenByDataInput {
  regardingWhat: Act
  title: String
  text: String
  sources: OpinionUpdatesourcesInput
  tags: OpinionUpdatetagsInput
  regardingWho: CompanyUpdateOneRequiredWithoutOpinionsInput
  affiliations: ActGradeUpdateManyWithoutAffiliatedToInput
}

input OpinionUpdateWithWhereUniqueWithoutRegardingWhoInput {
  where: OpinionWhereUniqueInput!
  data: OpinionUpdateWithoutRegardingWhoDataInput!
}

input OpinionUpdateWithWhereUniqueWithoutWrittenByInput {
  where: OpinionWhereUniqueInput!
  data: OpinionUpdateWithoutWrittenByDataInput!
}

input OpinionUpsertWithoutAffiliationsInput {
  update: OpinionUpdateWithoutAffiliationsDataInput!
  create: OpinionCreateWithoutAffiliationsInput!
}

input OpinionUpsertWithWhereUniqueWithoutRegardingWhoInput {
  where: OpinionWhereUniqueInput!
  update: OpinionUpdateWithoutRegardingWhoDataInput!
  create: OpinionCreateWithoutRegardingWhoInput!
}

input OpinionUpsertWithWhereUniqueWithoutWrittenByInput {
  where: OpinionWhereUniqueInput!
  update: OpinionUpdateWithoutWrittenByDataInput!
  create: OpinionCreateWithoutWrittenByInput!
}

input OpinionWhereInput {
  """Logical AND on all given filters."""
  AND: [OpinionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OpinionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OpinionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  regardingWhat: Act

  """All values that are not equal to given value."""
  regardingWhat_not: Act

  """All values that are contained in given list."""
  regardingWhat_in: [Act!]

  """All values that are not contained in given list."""
  regardingWhat_not_in: [Act!]
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  regardingWho: CompanyWhereInput
  writtenBy: UserWhereInput
  affiliations_every: ActGradeWhereInput
  affiliations_some: ActGradeWhereInput
  affiliations_none: ActGradeWhereInput
}

input OpinionWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company]!
  companyCategories(where: CompanyCategoryWhereInput, orderBy: CompanyCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CompanyCategory]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  opinions(where: OpinionWhereInput, orderBy: OpinionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Opinion]!
  actGrades(where: ActGradeWhereInput, orderBy: ActGradeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ActGrade]!
  causeGrades(where: CauseGradeWhereInput, orderBy: CauseGradeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CauseGrade]!
  company(where: CompanyWhereUniqueInput!): Company
  companyCategory(where: CompanyCategoryWhereUniqueInput!): CompanyCategory
  user(where: UserWhereUniqueInput!): User
  opinion(where: OpinionWhereUniqueInput!): Opinion
  actGrade(where: ActGradeWhereUniqueInput!): ActGrade
  causeGrade(where: CauseGradeWhereUniqueInput!): CauseGrade
  companiesConnection(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompanyConnection!
  companyCategoriesConnection(where: CompanyCategoryWhereInput, orderBy: CompanyCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompanyCategoryConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  opinionsConnection(where: OpinionWhereInput, orderBy: OpinionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OpinionConnection!
  actGradesConnection(where: ActGradeWhereInput, orderBy: ActGradeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActGradeConnection!
  causeGradesConnection(where: CauseGradeWhereInput, orderBy: CauseGradeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CauseGradeConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum Status {
  ASLEEP
  AWAKEN
  SACRED
  SAINT
}

type Subscription {
  company(where: CompanySubscriptionWhereInput): CompanySubscriptionPayload
  companyCategory(where: CompanyCategorySubscriptionWhereInput): CompanyCategorySubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  opinion(where: OpinionSubscriptionWhereInput): OpinionSubscriptionPayload
  actGrade(where: ActGradeSubscriptionWhereInput): ActGradeSubscriptionPayload
  causeGrade(where: CauseGradeSubscriptionWhereInput): CauseGradeSubscriptionPayload
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  email: String!
  password: String!
  picture: String
  status: Status
  opinions(where: OpinionWhereInput, orderBy: OpinionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Opinion!]
  causeGrades(where: CauseGradeWhereInput, orderBy: CauseGradeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CauseGrade!]
  actGrades(where: ActGradeWhereInput, orderBy: ActGradeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ActGrade!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String
  email: String!
  password: String!
  picture: String
  status: Status
  opinions: OpinionCreateManyWithoutWrittenByInput
  causeGrades: CauseGradeCreateManyWithoutGradedByInput
  actGrades: ActGradeCreateManyWithoutGradedByInput
}

input UserCreateOneWithoutActGradesInput {
  create: UserCreateWithoutActGradesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCauseGradesInput {
  create: UserCreateWithoutCauseGradesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutOpinionsInput {
  create: UserCreateWithoutOpinionsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutActGradesInput {
  id: ID
  name: String
  email: String!
  password: String!
  picture: String
  status: Status
  opinions: OpinionCreateManyWithoutWrittenByInput
  causeGrades: CauseGradeCreateManyWithoutGradedByInput
}

input UserCreateWithoutCauseGradesInput {
  id: ID
  name: String
  email: String!
  password: String!
  picture: String
  status: Status
  opinions: OpinionCreateManyWithoutWrittenByInput
  actGrades: ActGradeCreateManyWithoutGradedByInput
}

input UserCreateWithoutOpinionsInput {
  id: ID
  name: String
  email: String!
  password: String!
  picture: String
  status: Status
  causeGrades: CauseGradeCreateManyWithoutGradedByInput
  actGrades: ActGradeCreateManyWithoutGradedByInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  picture_ASC
  picture_DESC
  status_ASC
  status_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  email: String!
  password: String!
  picture: String
  status: Status
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  picture: String
  status: Status
  opinions: OpinionUpdateManyWithoutWrittenByInput
  causeGrades: CauseGradeUpdateManyWithoutGradedByInput
  actGrades: ActGradeUpdateManyWithoutGradedByInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  picture: String
  status: Status
}

input UserUpdateOneRequiredWithoutActGradesInput {
  create: UserCreateWithoutActGradesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutActGradesDataInput
  upsert: UserUpsertWithoutActGradesInput
}

input UserUpdateOneRequiredWithoutCauseGradesInput {
  create: UserCreateWithoutCauseGradesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCauseGradesDataInput
  upsert: UserUpsertWithoutCauseGradesInput
}

input UserUpdateOneRequiredWithoutOpinionsInput {
  create: UserCreateWithoutOpinionsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutOpinionsDataInput
  upsert: UserUpsertWithoutOpinionsInput
}

input UserUpdateWithoutActGradesDataInput {
  name: String
  email: String
  password: String
  picture: String
  status: Status
  opinions: OpinionUpdateManyWithoutWrittenByInput
  causeGrades: CauseGradeUpdateManyWithoutGradedByInput
}

input UserUpdateWithoutCauseGradesDataInput {
  name: String
  email: String
  password: String
  picture: String
  status: Status
  opinions: OpinionUpdateManyWithoutWrittenByInput
  actGrades: ActGradeUpdateManyWithoutGradedByInput
}

input UserUpdateWithoutOpinionsDataInput {
  name: String
  email: String
  password: String
  picture: String
  status: Status
  causeGrades: CauseGradeUpdateManyWithoutGradedByInput
  actGrades: ActGradeUpdateManyWithoutGradedByInput
}

input UserUpsertWithoutActGradesInput {
  update: UserUpdateWithoutActGradesDataInput!
  create: UserCreateWithoutActGradesInput!
}

input UserUpsertWithoutCauseGradesInput {
  update: UserUpdateWithoutCauseGradesDataInput!
  create: UserCreateWithoutCauseGradesInput!
}

input UserUpsertWithoutOpinionsInput {
  update: UserUpdateWithoutOpinionsDataInput!
  create: UserCreateWithoutOpinionsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  picture: String

  """All values that are not equal to given value."""
  picture_not: String

  """All values that are contained in given list."""
  picture_in: [String!]

  """All values that are not contained in given list."""
  picture_not_in: [String!]

  """All values less than the given value."""
  picture_lt: String

  """All values less than or equal the given value."""
  picture_lte: String

  """All values greater than the given value."""
  picture_gt: String

  """All values greater than or equal the given value."""
  picture_gte: String

  """All values containing the given string."""
  picture_contains: String

  """All values not containing the given string."""
  picture_not_contains: String

  """All values starting with the given string."""
  picture_starts_with: String

  """All values not starting with the given string."""
  picture_not_starts_with: String

  """All values ending with the given string."""
  picture_ends_with: String

  """All values not ending with the given string."""
  picture_not_ends_with: String
  status: Status

  """All values that are not equal to given value."""
  status_not: Status

  """All values that are contained in given list."""
  status_in: [Status!]

  """All values that are not contained in given list."""
  status_not_in: [Status!]
  opinions_every: OpinionWhereInput
  opinions_some: OpinionWhereInput
  opinions_none: OpinionWhereInput
  causeGrades_every: CauseGradeWhereInput
  causeGrades_some: CauseGradeWhereInput
  causeGrades_none: CauseGradeWhereInput
  actGrades_every: ActGradeWhereInput
  actGrades_some: ActGradeWhereInput
  actGrades_none: ActGradeWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
